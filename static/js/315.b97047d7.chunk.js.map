{"version":3,"file":"static/js/315.b97047d7.chunk.js","mappings":"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","sources":["reduxToolkit/contacts/selectors.js","components/ContactsList/ContactsList.jsx","components/Filter/Filter.jsx","components/Form/ContactsForm.jsx","pages/Contacts.jsx"],"sourcesContent":["\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilterWord = state => state.filter;\n\nexport const  selectFiltredContacts = state => {\n    const contacts = selectContacts(state);\n    const filter = selectFilterWord(state);\n    if(filter) return contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()))\n        return contacts;\n\n}\n","import { Button, ListItem, Text, UnorderedList } from \"@chakra-ui/react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectFiltredContacts } from \"reduxToolkit/contacts/selectors\";\nimport { Notify } from \"notiflix\";\nimport { deleteContacts } from \"reduxToolkit/contacts/operations\";\n\nconst ContactsList = () => {\n    const dispatch = useDispatch()\n    const filtredContacts = useSelector(selectFiltredContacts);\n\n    return (\n            <UnorderedList styleType=\"none\" ml={6}>\n            {filtredContacts.map(({name, number, id}) => {\n                const handleClick = () => {\n                    Notify.success(`The contact '${name}' is successfully deleted`);\n                    return dispatch(deleteContacts(id))\n                }\n                return <ListItem display='flex'\n                    alignItems='center'\n                    key={id}\n                    fontSize={18}\n                    mb={3}>\n                    <Text>{name}: {number}</Text>\n                    <Button\n                        colorScheme='teal'\n                        variant='outline'\n                        ml={3}\n                        type='button'\n                        _hover={{\n                            backgroundColor: 'teal',\n                            color: 'white'}}\n                        onClick={handleClick}>Delete</Button> </ListItem>\n            })}\n            </UnorderedList>\n    )\n}\n\nexport default ContactsList;","import { Box, Text } from \"@chakra-ui/react\";\n// import Input from \"components/Form/Input.styled\";\nimport { Input } from \"@chakra-ui/react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addFilter } from \"reduxToolkit/contacts/filterSlice\";\nimport { selectFilterWord } from \"reduxToolkit/contacts/selectors\";\n\nconst Filter = () => {\n    const filter = useSelector(selectFilterWord);\n    const dispatch = useDispatch()\n    const handleChange = (event) => {\n        dispatch(addFilter(event.target.value));\n    }\n\n    return (\n        <Box pl={6}>\n        <Text>Find contacts by name</Text>\n            <Input type=\"text\" name=\"filter\" value={filter} onChange={handleChange} mb={3} mt={3} w={250} _focus={{border:'solid 1px teal', boxShadow:'0 0 0 1px teal'}} />       \n        </Box>\n    )\n}\n\nexport default Filter;","import { Button, FormControl, FormLabel, Input } from \"@chakra-ui/react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectContacts } from \"reduxToolkit/contacts/selectors\";\nimport { Notify } from \"notiflix\";\nimport { addContactBase } from \"reduxToolkit/contacts/operations\";\n\nconst ContactsForm = () => {\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectContacts);\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const form = event.currentTarget;\n        const name = form.elements.name.value;\n        const number = form.elements.number.value;\n        const obj = { name, number };\n        if (contacts.find(contact => contact.name === name)) {\n            Notify.warning(`${name} is already in your contacts`)\n            \n        }\n        else {\n            dispatch(addContactBase(obj));\n            Notify.success(`New contact '${name}' is successfully created`)\n        }\n        form.reset();\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <FormControl outline='solid 1px lightgrey' borderRadius={10} m={6} p={6} w={500}>\n                <FormLabel htmlFor='name' >Name</FormLabel>\n                    <Input\n                        type=\"text\"\n                        name=\"name\"\n                        required\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                        title=\"Name must contain only letters\"\n                        marginBottom={3} w={250}\n                        _focus={{border:'solid 1px teal',boxShadow:'0 0 0 1px teal'}}/>\n        \n               \n                    <FormLabel htmlFor='number' >Number</FormLabel>\n            \n                    <Input\n                        type=\"tel\"\n                        name=\"number\"\n                        required\n                        pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n                    title=\"'123-45-67'   Number must contain only numbers\"\n                    marginBottom={3} w={250}\n                _focus={{border:'solid 1px teal',boxShadow:'0 0 0 1px teal'}}/>\n                <br/>\n                <Button colorScheme='teal'\n                    variant='outline'\n                    type=\"submit\"\n                    _hover={{\n                        backgroundColor: 'teal',\n                        color: 'white'}}>Add contact</Button>\n            </FormControl>\n            </form>\n    )\n\n}\n\nexport default ContactsForm;","import { Box, Flex, Heading, Spinner} from \"@chakra-ui/react\";\nimport ContactsList from \"components/ContactsList/ContactsList\";\nimport Filter from \"components/Filter/Filter\";\nimport ContactsForm from \"components/Form/ContactsForm\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectIsLogIn } from \"reduxToolkit/auth/selectors\";\nimport { fetchContacts } from \"reduxToolkit/contacts/operations\";\nimport { selectContacts, selectError, selectIsLoading } from \"reduxToolkit/contacts/selectors\";\n\nconst Contacts = () => {\n    const dispatch = useDispatch();\n    const isLoad = useSelector(selectIsLoading);\n    const error = useSelector(selectError);\n    const contacts = useSelector(selectContacts);\n    const isLogIn = useSelector(selectIsLogIn);\n\n    useEffect(() => {\n        if (isLogIn) dispatch(fetchContacts());\n    }, [dispatch, isLogIn]);\n    \n    return (\n        <Box as='div' padding={6}>\n                <Heading>Phonebook</Heading>\n            <ContactsForm />\n            \n            {(isLoad && !error) ? (<Flex textAlign='center' justifyContent='center' w={500}>\n                <Spinner\n                    thickness='4px'\n                    speed='0.8s'\n                    emptyColor='gray.200'\n                    color='teal.400'\n                    size='xl'/>\n            </Flex>)\n            :\n                (contacts && contacts.length !== 0) && (\n                <>\n                    <Heading>Contacts</Heading>\n                    <Filter />\n                    <ContactsList />\n                </>\n             )} \n        </Box>\n    )\n};\nexport default Contacts;"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilterWord","filter","selectFiltredContacts","contact","name","toLowerCase","includes","dispatch","useDispatch","filtredContacts","useSelector","_jsx","UnorderedList","styleType","ml","children","map","_ref","number","id","_jsxs","ListItem","display","alignItems","fontSize","mb","Text","Button","colorScheme","variant","type","_hover","backgroundColor","color","onClick","Notify","concat","deleteContacts","Box","pl","Input","value","onChange","event","addFilter","target","mt","w","_focus","border","boxShadow","onSubmit","preventDefault","form","currentTarget","elements","obj","find","addContactBase","reset","FormControl","outline","borderRadius","m","p","FormLabel","htmlFor","required","pattern","title","marginBottom","isLoad","isLogIn","selectIsLogIn","useEffect","fetchContacts","as","padding","Heading","ContactsForm","Flex","textAlign","justifyContent","Spinner","thickness","speed","emptyColor","size","length","_Fragment","Filter","ContactsList"],"sourceRoot":""}