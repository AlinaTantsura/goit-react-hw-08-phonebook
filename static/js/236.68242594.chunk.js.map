{"version":3,"file":"static/js/236.68242594.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm.jsx","pages/Register.jsx","../node_modules/@chakra-ui/form-control/src/form-control.tsx","../node_modules/@chakra-ui/form-control/src/form-label.tsx","../node_modules/@chakra-ui/form-control/src/use-form-control.ts","../node_modules/@chakra-ui/input/src/input.tsx","../node_modules/@chakra-ui/toast/src/use-toast.tsx"],"sourcesContent":["import { Button, FormControl, FormLabel, Input, useToast } from \"@chakra-ui/react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { register } from \"reduxToolkit/auth/operations\";\nimport { selectToken } from \"reduxToolkit/auth/selectors\";\n\nconst RegisterForm = () => {\n    const dispatch = useDispatch();\n    const token = useSelector(selectToken);\n    const toast = useToast();\n\n    const handleRegister = (event) => {\n        event.preventDefault();\n        const form = event.currentTarget;\n        dispatch(register({\n            name: form.elements.name.value,\n            email: form.elements.email.value,\n            password: form.elements.password.value,\n        }));\n        if (!token) {\n            toast({\n                position: 'top-right',\n                title: 'E-mail is already used.',\n                description: \"Please, log in or use another e-mail.\",\n                status: 'error',\n                duration: 4000,\n            })\n        }\n        form.reset();\n    }\n    return (\n        <form onSubmit={handleRegister}>\n            <FormControl margin={6}>\n                <FormLabel htmlFor='name' >Username</FormLabel>\n                    <Input\n                        type='text'\n                        name='name'\n                        id='name'\n                        required\n                        marginBottom={3}\n                        w={250}\n                        _focus={{\n                            border: 'solid 1px teal',\n                            boxShadow: '0 0 0 1px teal'\n                        }} />\n            \n                <FormLabel htmlFor='email'>E-mail </FormLabel>\n                    <Input\n                        type='email'\n                        name='email'\n                        id='email'\n                        required\n                        marginBottom={3}\n                        w={250}\n                        _focus={{\n                            border: 'solid 1px teal',\n                            boxShadow: '0 0 0 1px teal'\n                        }} />\n           \n                <FormLabel htmlFor='password'>Password</FormLabel>\n                    <Input\n                        type='password'\n                        name='password'\n                        id='password'\n                        required\n                        marginBottom={3}\n                        w={250}\n                        pattern=\".{7,}\"\n                        title=\"Seven or more characters\"\n                        _focus={{\n                            border: 'solid 1px teal',\n                            boxShadow: '0 0 0 1px teal'\n                        }} />\n                <br/>\n                <Button colorScheme='teal'\n                    variant='outline'\n                    type='submit'\n                    _hover={{\n                        backgroundColor: 'teal',\n                        color: 'white'}}>Register</Button>\n            </FormControl>\n        </form>\n    )\n};\n\nexport default RegisterForm;","import RegisterForm from \"components/RegisterForm/RegisterForm\";\n\nconst Register = () => {\n    return (\n        <RegisterForm />\n    )\n};\nexport default Register;","import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n    }),\n    [htmlProps, isDisabled, isFocused, isInvalid, isReadOnly],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext, useFormControlStyles } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactNode\n   */\n  requiredIndicator?: React.ReactNode\n  /**\n   * @type React.ReactNode\n   */\n  optionalIndicator?: React.ReactNode\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  passedProps,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", passedProps)\n  const props = omitThemingProps(passedProps)\n\n  const {\n    className,\n    children,\n    requiredIndicator = <RequiredIndicator />,\n    optionalIndicator = null,\n    ...rest\n  } = props\n\n  const field = useFormControlContext()\n  const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n  return (\n    <chakra.label\n      {...ownProps}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles,\n      }}\n    >\n      {children}\n      {field?.isRequired ? requiredIndicator : optionalIndicator}\n    </chakra.label>\n  )\n})\n\nFormLabel.displayName = \"FormLabel\"\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nRequiredIndicator.displayName = \"RequiredIndicator\"\n","import { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: React.FocusEventHandler<T>\n  onBlur?: React.FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n  \"aria-describedby\"?: string\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n *\n * @internal\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } =\n    useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\n/**\n * @internal\n */\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = props[\"aria-describedby\"]\n    ? [props[\"aria-describedby\"]]\n    : []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * The native HTML `size` attribute to be passed to the `input`\n   */\n  htmlSize?: number\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n *\n * @see Docs https://chakra-ui.com/docs/components/input\n */\nexport const Input = forwardRef<InputProps, \"input\">(function Input(\n  props,\n  ref,\n) {\n  const { htmlSize, ...rest } = props\n\n  const styles = useMultiStyleConfig(\"Input\", rest)\n  const ownProps = omitThemingProps(rest)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      size={htmlSize}\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nInput.displayName = \"Input\"\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n","import type { AlertStatus } from \"@chakra-ui/alert\"\nimport { StyleProps, ThemingProps, useChakra } from \"@chakra-ui/system\"\nimport type { RenderProps, ToastId, ToastOptions } from \"./toast.types\"\nimport { createToastFn, CreateToastFnReturn } from \"./toast\"\nimport { ToastPosition } from \"./toast.placement\"\nimport { useMemo } from \"react\"\nimport { useToastOptionContext } from \"./toast.provider\"\n\nexport interface UseToastOptions extends ThemingProps<\"Alert\"> {\n  /**\n   * The placement of the toast\n   *\n   * @default \"bottom\"\n   */\n  position?: ToastPosition\n  /**\n   * The delay before the toast hides (in milliseconds)\n   * If set to `null`, toast will never dismiss.\n   *\n   * @default 5000 ( = 5000ms )\n   */\n  duration?: ToastOptions[\"duration\"]\n  /**\n   * Render a component toast component.\n   * Any component passed will receive 2 props: `id` and `onClose`.\n   */\n  render?(props: RenderProps): React.ReactNode\n  /**\n   * The title of the toast\n   */\n  title?: React.ReactNode\n  /**\n   * The description of the toast\n   */\n  description?: React.ReactNode\n  /**\n   * If `true`, toast will show a close button\n   * @default false\n   */\n  isClosable?: boolean\n  /**\n   * The status of the toast.\n   */\n  status?: AlertStatus\n  /**\n   * A custom icon that will be displayed by the toast.\n   */\n  icon?: React.ReactNode\n  /**\n   * The `id` of the toast.\n   *\n   * Mostly used when you need to prevent duplicate.\n   * By default, we generate a unique `id` for each toast\n   */\n  id?: ToastId\n  /**\n   * Callback function to run side effects after the toast has closed.\n   */\n  onCloseComplete?: () => void\n  /**\n   * Optional style overrides for the container wrapping the toast component.\n   */\n  containerStyle?: StyleProps\n}\n\n/**\n * React hook used to create a function that can be used\n * to show toasts in an application.\n */\nexport function useToast(options?: UseToastOptions): CreateToastFnReturn {\n  const { theme } = useChakra()\n  const defaultOptions = useToastOptionContext()\n\n  return useMemo(\n    () =>\n      createToastFn(theme.direction, {\n        ...defaultOptions,\n        ...options,\n      }),\n    [options, theme.direction, defaultOptions],\n  )\n}\n\nexport default useToast\n"],"names":["dispatch","useDispatch","token","useSelector","selectToken","toast","useToast","_jsx","onSubmit","event","preventDefault","form","currentTarget","register","name","elements","value","email","password","position","title","description","status","duration","reset","children","_jsxs","FormControl","margin","FormLabel","htmlFor","Input","type","id","required","marginBottom","w","_focus","border","boxShadow","pattern","Button","colorScheme","variant","_hover","backgroundColor","color","RegisterForm","createContext","errorMessage","_createContext2","FormControlStylesProvider","useFormControlStyles","strict","_createContext4","FormControlProvider","useFormControlContext","forwardRef","props","ref","styles","useMultiStyleConfig","idProp","isRequired","isInvalid","isDisabled","isReadOnly","htmlProps","uuid","useId","labelId","feedbackId","helpTextId","useState","_useState2","hasFeedbackText","setHasFeedbackText","_useState4","hasHelpText","setHasHelpText","_useState6","isFocused","setFocus","getHelpTextProps","useCallback","forwardedRef","mergeRefs","node","getLabelProps","dataAttr","getErrorMessageProps","getRootProps","role","getRequiredIndicatorProps","onFocus","onBlur","useFormControlProvider","omitThemingProps","context","_","className","cx","chakra","div","__css","displayName","field","helperText","passedProps","useStyleConfig","_props$requiredIndica","requiredIndicator","RequiredIndicator","_props$optionalIndica","optionalIndicator","rest","ownProps","_a","label","display","textAlign","span","useFormControl","disabled","readOnly","labelIds","push","join","_b","_c","callAllHandlers","useFormControlProps","ariaAttr","htmlSize","input","_className","size","options","theme","useChakra","defaultOptions","useToastOptionContext","useMemo","createToastFn","direction"],"sourceRoot":""}