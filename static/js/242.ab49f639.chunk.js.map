{"version":3,"file":"static/js/242.ab49f639.chunk.js","mappings":"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","sources":["components/Form/Button.styled.js","components/ContactsList/Item.styled.js","reduxToolkit/contacts/selectors.js","components/ContactsList/ContactsList.jsx","components/Form/Input.styled.js","components/Filter/Filter.jsx","components/Form/Form.styled.js","components/Form/Form.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nconst Button = styled.button(() => {\n    return {\n        padding: '3px 10px',\n        width: 'fit-content',\n        border: 'solid 1px #D3D3D3',\n        borderRadius: '4px',\n        '&:hover': {\n            backgroundColor: '#C0C0C0',\n            borderColor: '#A9A9A9',\n        }\n    }\n})\n\nexport default Button;","import styled from 'styled-components';\n\nconst Item = styled.li(() => {\n    return {\n        marginBottom: '15px',\n        button: {\n            marginLeft: '15px',\n        }\n    }\n});\n\nexport default Item;","\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilterWord = state => state.filter;\n\nexport const  selectFiltredContacts = state => {\n    const contacts = selectContacts(state);\n    const filter = selectFilterWord(state);\n    if(filter) return contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()))\n        return contacts;\n\n}\n","import Button from \"components/Form/Button.styled\";\nimport Item from \"./Item.styled\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectFiltredContacts } from \"reduxToolkit/contacts/selectors\";\nimport { Notify } from \"notiflix\";\nimport { deleteContacts } from \"reduxToolkit/contacts/operations\";\n\nconst ContactsList = () => {\n    const dispatch = useDispatch()\n    const filtredContacts = useSelector(selectFiltredContacts);\n\n    return (\n            <ul>\n            {filtredContacts.map(({name, number, id}) => {\n                const handleClick = () => {\n                    Notify.success(`The contact '${name}' is successfully deleted`);\n                    return dispatch(deleteContacts(id))\n                }\n                return <Item key={id}>{name}: {number}\n                    <Button type='button'\n                        onClick={handleClick}>Delete</Button> </Item>\n            })}\n            </ul>\n    )\n}\n\nexport default ContactsList;","import styled from 'styled-components';\n\nconst Input = styled.input(() => {\n    return {\n        padding: '4px',\n        border: 'solid 1px #D3D3D3',\n        borderRadius: '3px',\n        '&:focus': {\n            outline: 'none',\n            border:'solid 2px #808080',\n        }\n    }\n});\n\nexport default Input;","import Input from \"components/Form/Input.styled\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addFilter } from \"reduxToolkit/contacts/filterSlice\";\nimport { selectFilterWord } from \"reduxToolkit/contacts/selectors\";\n\nconst Filter = () => {\n    const filter = useSelector(selectFilterWord);\n    const dispatch = useDispatch()\n    const handleChange = (event) => {\n        dispatch(addFilter(event.target.value));\n    }\n\n    return (\n        <div>\n        <p>Find contacts by name</p>\n            <Input type=\"text\" name=\"filter\" value={filter} onChange={handleChange} />       \n        </div>\n    )\n}\n\nexport default Filter;","import styled from 'styled-components';\n\nconst FormStyled = styled.form(() => {\n    return {\n        border: 'solid 1px\t#A9A9A9',\n        display: 'flex',\n        flexDirection: 'column',\n        gap: '15px',\n        padding: '10px',\n        maxWidth: '400px',\n        label: {\n            display: 'flex',\n            flexDirection: 'column',\n            gap: '10px',\n            maxWidth: '200px',\n            \n        },\n        \n    }\n})\n\nexport default FormStyled;","import FormStyled from \"./Form.styled\";\nimport Button from \"./Button.styled\";\nimport Input from \"./Input.styled\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectContacts } from \"reduxToolkit/contacts/selectors\";\nimport { Notify } from \"notiflix\";\nimport { addContactBase } from \"reduxToolkit/contacts/operations\";\n\nconst Form = () => {\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectContacts);\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const form = event.currentTarget;\n        const name = form.elements.name.value;\n        const number = form.elements.number.value;\n        const obj = { name, number };\n        if (contacts.find(contact => contact.name === name)) {\n            Notify.warning(`${name} is already in your contacts`)\n            \n        }\n        else {\n            dispatch(addContactBase(obj));\n            Notify.success(`New contact '${name}' is successfully created`)\n        }\n        form.reset();\n    }\n\n    return (\n        <FormStyled onSubmit={handleSubmit}>\n        <label>\n            Name\n                    <Input\n                        type=\"text\"\n                        name=\"name\"\n                        required\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                        title=\"Name must contain only letters\" />\n        </label>\n        <label>\n            Number\n                    <Input\n                        type=\"tel\"\n                        name=\"number\"\n                        required\n                        pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n                        title=\"'123-45-67'   Number must contain only numbers\"/>\n        </label>\n        <Button type=\"submit\">Add contact</Button>\n    </FormStyled>\n    )\n\n}\n\nexport default Form;","import ContactsList from \"components/ContactsList/ContactsList\";\nimport Filter from \"components/Filter/Filter\";\nimport Form from \"components/Form/Form\";\n\nconst Contacts= () => {\n    return (\n            <div>\n                <h1>Phonebook</h1>\n                <Form />\n            \n            {/* {(isLoad && !error) && <Loader />}\n           {     (contacts.length !== 0) && ( */}\n                <>\n                    <h2>Contacts</h2>\n                    <Filter />\n                    <ContactsList />\n                </>\n            {/* )} */}\n    </div>\n    )\n};\nexport default Contacts;"],"names":["styled","padding","width","border","borderRadius","backgroundColor","borderColor","marginBottom","button","marginLeft","selectContacts","state","contacts","items","selectFilterWord","filter","selectFiltredContacts","contact","name","toLowerCase","includes","dispatch","useDispatch","filtredContacts","useSelector","_jsx","children","map","_ref","number","id","_jsxs","Item","Button","type","onClick","Notify","concat","deleteContacts","outline","Input","value","onChange","event","addFilter","target","display","flexDirection","gap","maxWidth","label","FormStyled","onSubmit","preventDefault","form","currentTarget","elements","obj","find","addContactBase","reset","required","pattern","title","Form","_Fragment","Filter","ContactsList"],"sourceRoot":""}